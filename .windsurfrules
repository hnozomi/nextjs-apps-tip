## 変数・型定義

1. `let` は使用せず、すべて `const` を使用すること。
2. `interface` は使用せず、すべて `type` を使用して型定義を行うこと。
3. TypeScriptの型チェックは厳密に行うこと（暗黙の any を禁止する）。
4. 型定義には具体的で説明的な名前を付け、`Data`、`Item`、`Info` などの汎用名は避けること。
5. 型定義は再利用を意識して分割し、関連のある型には共通のプレフィックスを使用すること（例：`ProfileContact`, `ProfileExperience`）。
6. TypeScriptのユーティリティ型（`Partial`, `Pick`, `Omit` など）は適切に活用すること。
7. 型定義は `types/` フォルダにまとめ、必要に応じてドメインごとにファイルを分割すること。

## コーディングスタイル・構文

8. `eslint-disable` コメントは使用しないこと。どうしても必要な場合は理由を明記すること。
9. コメントは基本的に記述しないこと（自己説明的なコードを心がける）。
10. セミコロンは使用しないこと（Prettierスタイルに準拠する）。
11. `React.FC` は使用しないこと。`children` が必要な場合は明示的に型を定義すること。
12. `default export` は使用せず、すべて `named export` にすること。

## コンポーネント設計・構造

13. props が3つ以上あるコンポーネントは、props をオブジェクト形式で受け取ること。
14. 1ファイルには 1つのコンポーネントまたは関数のみ定義すること。
15. コンポーネント名とファイル名は一致させ、ファイル名は大文字始まりとする（例：`UserCard.tsx`）。
16. ユーティリティや hooks は小文字始まりとし、コンポーネントと区別すること。
17. ファイル名・ディレクトリ名はキャメルケースで統一すること（例：`userProfileCard.tsx`）。
18. ページコンポーネントは `app/` 配下に、UIコンポーネントは `components/`、ドメインごとのロジックは `features/` に配置するなど、責務ごとにディレクトリを分離すること。

## 副作用・状態管理・ロジック分離

19. 不要な `useEffect` は避け、可能な限り props や純粋関数で代替すること。
20. コンポーネント内のロジック（データ加工・計算処理など）は `lib/`、`hooks/`、`utils/` に切り出して再利用・テスト可能な構造にすること。